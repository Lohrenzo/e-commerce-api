{
  "swagger": "2.0",
  "info": {
    "title": "E-commerce API",
    "description": "An e-commerce web application API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Cart",
      "description": "Requests relating to the user's cart"
    },
    {
      "name": "Item",
      "description": "Requests relating to product items"
    },
    {
      "name": "Order",
      "description": "Requests relating to the user's orders"
    },
    {
      "name": "User",
      "description": "Requests relating to user authentication"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/cart": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "This endpoint gets the cart items of a user",
        "description": "Get cart items",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "This endpoint create new cart and adds an item to the cart, or just adds an item to an already existing cart",
        "description": "Add to cart or create new cart",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "itemId": {
                  "example": "any"
                },
                "quantity": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cart/": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete item in a user",
        "description": "Delete item in cart",
        "parameters": [
          {
            "name": "itemId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/item": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Fetch all product items",
        "description": "Fetch all product items",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Create a new product item",
        "description": "Create a new product item",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/item/{id}": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Fetch a product item using the item ID",
        "description": "Fetch a product item using the item ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Item"
        ],
        "summary": "Update a product item using the item ID",
        "description": "Update a product item using the item ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Item"
        ],
        "summary": "Delete a product item using the item ID",
        "description": "Delete a product item using the item ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "This endpoint returns a list of a user",
        "description": "Get a user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/order/checkout": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "The endpoint returns a payment URL that leads to paypal's payment gateway",
        "description": "Checkout a user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/order/checkout/complete": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "The endpoint basically completes the checkout. It captures the paypal payment, creates a new order, deletes the cart cart after successful order placement then returns the new order that was created as well as a success message.",
        "description": "Complete the order checkout",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/order/checkout/cancel": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an order checkout",
        "description": "Cancel an order checkout",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User registration endpoint. Creates a new user with the details provided, returns the user's details and a JSON Web Token for authentication",
        "description": "Create a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "firstName": {
                  "example": "any"
                },
                "lastName": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                },
                "password2": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User login endpoint. Takes in credentials and returns the user's details as well as a JSON Web Token for authentication",
        "description": "Login a user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "This endpoint logs out only the current auth token. i.e renders the token useless and deletes it from the user",
        "description": "Logout a user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/logoutAll": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "This endpoint logs out all the user",
        "description": "Logout all tokens",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}